#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('http');
var app = require('../app');
var passport = require('passport')
var debug = require('debug')('pager-apis:server');
var request = require('../utils/request');
var local = require('passport-local')
var test = request(process.env)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

passport.use(new local.Strategy(strategy));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function strategy(username,password,done){
  (async function({config}){
     try{
      var {id} = await config(
        'post',
        'login/submit',
        {username,password}
      )

      var profile = await config(
        'get',`profile/${id}`
      )
      var bio = await config(
        'get',`bio/${id}`
      )
      var highschool = await config(
        'get',`highschool/${id}`
      )
      var university = await config(
        'get',`university/${id}`
      )
      var work = await config(
        'get',`work/${id}`
      )
      var currentCity = await config(
        'get',`city/currentCity/${id}`
      )
      var homeTown = await config(
        'get',`city/homeTown/${id}`
      )
      console.log({
        profile,
        bio,
        highschool,
        university,
        work,
        currentCity,
        homeTown
      })
    }
    catch({response}){
      console.log({
        status : response.status,
        message : response.data
      })
    }
  })(test)
}